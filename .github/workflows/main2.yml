import requests
import json
from datetime import datetime

# Hardcoded configuration (for testing only â€” do not use in production)
QUALTRICS_API_TOKEN = '2sau1kIgDfl8W4TqnMe7oMDnVOdUsGZe72l0ueJA'
QUALTRICS_DATA_CENTER = 'pdx1'
SLACK_BOT_TOKEN = 'xoxb-9449251159-9188709123504-hmvIDhE8itwBUfGW13A7aUFp'
SLACK_CHANNEL_ID = 'C094VSMN9JR'

# Headers for Qualtrics API
qualtrics_headers = {
    'x-api-token': QUALTRICS_API_TOKEN,
    'Content-Type': 'application/json'
}

# Headers for Slack API
slack_headers = {
    'Authorization': f'Bearer {SLACK_BOT_TOKEN}',
    'Content-Type': 'application/json'
}

def fetch_surveys():
    url = f'https://{QUALTRICS_DATA_CENTER}.qualtrics.com/API/v3/surveys'
    response = requests.get(url, headers=qualtrics_headers)
    response.raise_for_status()
    return response.json()['result']['elements']

def fetch_survey_metadata(survey_id):
    url = f'https://{QUALTRICS_DATA_CENTER}.qualtrics.com/API/v3/surveys/{survey_id}/metadata'
    response = requests.get(url, headers=qualtrics_headers)
    response.raise_for_status()
    return response.json()['result']

def calculate_ctr(metadata):
    views = metadata.get('views', 0)
    clicks = metadata.get('clicks', 0)
    if views == 0:
        return 0.0
    return (clicks / views) * 100

def format_slack_message(low_ctr_surveys):
    if not low_ctr_surveys:
        return f"âœ… All surveys have a CTR above 1% as of {datetime.now().strftime('%Y-%m-%d')}."

    message = f"ðŸš¨ *Daily Survey Health Check* ({datetime.now().strftime('%Y-%m-%d')}) ðŸš¨\n"
    message += "The following surveys have a CTR below 1%:\n"
    for survey in low_ctr_surveys:
        message += f"- *{survey['name']}* (CTR: {survey['ctr']:.2f}%)\n"
    return message

def post_to_slack(message):
    payload = {
        'channel': SLACK_CHANNEL_ID,
        'text': message
    }
    response = requests.post('https://slack.com/api/chat.postMessage', headers=slack_headers, data=json.dumps(payload))
    response.raise_for_status()
    return response.json()

def main():
    surveys = fetch_surveys()
    low_ctr_surveys = []

    for survey in surveys:
        try:
            metadata = fetch_survey_metadata(survey['id'])
            ctr = calculate_ctr(metadata)
            if ctr < 1.0:
                low_ctr_surveys.append({'name': survey['name'], 'ctr': ctr})
        except Exception as e:
            print(f"Error processing survey {survey['name']}: {e}")

    message = format_slack_message(low_ctr_surveys)
    post_to_slack(message)

if __name__ == '__main__':
    main()
